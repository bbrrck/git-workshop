---
title: "Git workshop"
subtitle: "*Aj Ty v IT*"
author: "Tibor Stanko"
date: "*13.9.2022*"
format:
    revealjs: 
        mermaid-format: svg
        highlight-style: gruvbox-dark
        #highlight-style: gruvbox-light
        theme: [simple, slides.scss]
        width: 1500
        # height: 800
        number-sections: true
        number-depth: 1
        # preview-links: true
        # logo: logo.png
        # chalkboard: true
        toc: true
        toc-depth: 1
        toc-title: "Obsah"
        # footer: "Git workshop - 13.9.2022"
        center-title-slide: true
        code-line-numbers: false
        title-slide-attributes:
            data-background-image: img/hero.svg
            data-background-size: 50%
            data-background-position: bottom
            # footer: "."
        auto-animate-easing: ease-in-out
        auto-animate-unmatched: false
        auto-animate-duration: 0.8
---

# Úvod

## O mne 
:::: {.columns}

::: {.column width="72%"}
- [Tibor Stanko](https://tiborstanko.sk/), 31 rokov
- od 2020 dátový inžinier v Zurich Insurance, Bratislava 🇸🇰
- predtým 6 rokov v akademickej sfére vo 🇫🇷 (PhD, postdoc)
- rád automatizujem nudné úlohy s pomocou Pythonu 🐍
- nie som Git guru, no Git používam denne už viac ako 7 rokov
- moje voľnočasové aktivity: 👨‍👩‍👧‍👦🚲⛰️🎸🎹🍺
:::

::: {.column width="28%"}
![](img/tibors.jpg){.rounded-corners}
:::

::::

## O tomto workshope

## Anketa!

 <!-- SECTION - Git a Github -->

# Git a Github

## Čo je to Git?

- **systém pre správu verzií**
- angl. *version control system* (VCS) alebo *source control management* (SCM)
- zaznamenáva históriu vývoja projektu
- užitočný pre tímy aj pre jednotlivcov
- nie je len o kóde, dovoľuje ukladať ľubovoľné súbory


## Prečo potrebujeme systémy na správu verzií?
![](img/how-not-to-name-files.png)

## Prečo potrebujeme systémy na správu verzií?
![](img/how-not-to-name-files-crossed.png)

## Čo umožňuje Git?

<!-- ::: {.incremental} -->
- ukladať verzie
- prepínať medzi verziami
- obnoviť predošlú verziu
- porovnávať verzie
- vytvárať vetvy
- zlučovať vetvy
<!-- - riešiť konflikty medzi vetvami -->
<!-- ::: -->

## Git slovník

::: {.columns}

::: {.column width="50%" .git-slovnik}
| en | sk |
|---|---|
| *branch*              | vetva |
| *clone*               | naklonovanie repozitára |
| *commit*              | záznam |
| *commit message*      | popis záznamu |
| *conflict*            | konflikt medzi verziami |
| *conflict resolution* | riešenie konfliktov |
| *diff*                | rozdiel medzi verziami |
| *merge*               | zlúčenie vetiev |
:::

::: {.column width="50%" .git-slovnik}
| en | sk |
|---|---|
| *pull*                | stiahnutie *remote* zmien |
| *push*                | odoslanie lokálnych zmien |
| *repository*          | repozitár, úložisko |
| *remote*              | vzdialený repozitár |
| *snapshot*            | snímka |
| *staging area*        | prípravná oblasť (tiež *index*) |
| *status*              | stav repozitára |
| *version*             | verzia |
:::

:::

## Čo je to Github?
- *"sociálna sieť pre programátorov"*
- **Git** = systém na správu verzií
- **Github** = cloudový portál na ukladanie repozitárov
- používa Git, no nie je jeho súčasťou
<!-- - portál na ukladanie vzdialených Git repozitárov -->
- obsahuje funkcionalitu ktorá nie je v Gite
    - *Issues*, *Pull requests*, *Actions*, ...
- podobné služby: [Gitlab](https://about.gitlab.com/), [Bitbucket](https://bitbucket.org/), [Azure DevOps](https://dev.azure.com/), a iné

## {background-image="img/github-screenshot.png" background-size="contain"}

# Základy Gitu
```{mermaid}
%%| fig-width: 6.5
%%{
    init: { 
        'logLevel': 'debug', 
        'theme': 'base', 
        'gitGraph': {
            'showCommitLabel': true, 
            'showBranches': true, 
            'mainBranchName': 'main'
        } 
    } 
}%%
    gitGraph
        checkout main
        commit id:"v1"
        commit id:"v2"
        commit id:"v3"
```


## Krok 0: Pracujeme s terminálom

- Aby sme pochopili ako Git funguje, budeme na začiatku spúšťať Git príkazy cez **terminál**
- Neskôr si ukážeme aj použitie Gitu priamo v IDE (napr. vo VS Code)
- Vo **Windowse** odporúčam [Windows Terminal](https://apps.microsoft.com/store/detail/windows-terminal/9N0DX20HK701?hl=en-us&gl=us) a PowerShell

. . .

::: {.fontsize-070}
- Základné príkazy na navigáciu v termináli:
    - `pwd` --- vypíš aktuálny adresár
    - `cd folder` --- zmeň aktuálny adresár na `folder`

```powershell
>> pwd                        # C:\Users\tibor.stanko
>> cd folder                  # C:\Users\tibor.stanko\folder
>> cd ..                      # C:\Users\tibor.stanko
>> cd C:\Users\janko.hrasko\  # C:\Users\janko.hrasko
>> cd ~                       # C:\Users\tibor.stanko
```

:::

## Krok 1: Inštalácia Gitu

- Vo **Windowse** existuje viacero spôsobov ako nainštalovať Git, napr.
    - cez [klasický inštalátor](https://git-scm.com/download/win)
    - cez [scoop](https://scoop.sh/) (odporúčam) --- v PowerShell spustite nasledovné príkazy:

::: {.fontsize-070}
```powershell
Set-ExecutionPolicy RemoteSigned -Scope CurrentUser
irm get.scoop.sh | iex # inštalácia scoopu
scoop install git # inštalácia gitu
```
:::

- **macOS** a **Linux**: inštrukcie na oficiálnej stránke [v angličtine](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) alebo [v češtine](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)

## Krok 2: Nastavenie Gitu {auto-animate="true"}

- Skontrolujme či je Git správne nainštalovaný:
```powershell
git --version
```

- Predtým ako začneme pracovať s Gitom, je potrebné nastaviť si meno a email. Tieto údaje bude Git používať na priradenie autora k verzii.
```powershell
git config --global user.name "Tibor Stanko"
git config --global user.email "tibor.stanko@zurich.com"
```

- Predvolenú vetvu si nastavíme na `main` (o [vetvách](#/vetvy-branches) si povieme viac neskôr)
```powershell
git config --global init.defaultBranch "main"
```

## Krok 3: Vytvorenie Git repozitára

- Prepneme sa do adresára z ktorého chceme spraviť repozitár:

```powershell
cd ~\awesome-project
```

- Príkaz `git init` slúži na vytvorenie Git repozitára v aktuálnom adresári:

```powershell
git init
```

- Po spustení príkazu Git vypíše:
```markdown
Initialized empty Git repository in C:/Users/tibor.stanko/awesome-project/.git/
```


## Krok 4: Uloženie verzie
- Uloženie verzie prebieha v dvoch krokoch

    1. Cez `git add` označíme zmeny ktoré majú byť pridané do novej verzie
```powershell
git add awesome-function.py
```
    2. Zavolaním `git commit` vytvoríme novú verziu
```powershell
git commit -m "pridal som awesome-function.py"
```

- Aktuálny stav repozitára môžeme skontrolovať cez `git status` 
```powershell
git status # alebo `git status -s` pre skrátený výpis
```

::: {.notes}
Niektoré systémy na kontrolu verzií fungujú tak že vytvoria novú verziu zo všetkých aktuálnych súborov v repozitári. Tento spôsob ukladania záloh môže byť nevýhodný. Príkladom je situácia keď sme v repozitári implementovali dve nezávislé funkcie, a chceme ich zachytiť v dvoch rozdielnych verziách. V Gite preto existuje koncept prípravnej zóny (*staging area*), vďaka ktorej máme kontrolu nad tým ktoré zmeny budú a ktoré nebudú pridané do nasledujúcej verzie.

:::

## Úlohy
1. Vytvor si na svojom počítači prázdny adresár, napr. `git-workshop`
1. Sprav z adresára `git-workshop` Git repozitár 
1. Vytvor v adresári súbor (napr. `test.txt`) s ľubovoľným obsahom
1. Pridaj `test.txt` do ďalšej verzie a ulož ju

<!-- ## Krok 5: Git vo VS Code -->

# Vetvy *(branches)*

## Čo je to vetva *(branch)* ?

- doteraz sme pracovali na vetve s názvom *main* (historický názov *master*)


## Načo sú dobré vetvy?

## Vytvorenie vetvy *(branch)*
```powershell
git branch dog
git checkout dog
```

alebo

```powershell
git checkout -b dog
```

## Zlučovanie vetiev *(merge)*

```powershell
git checkout main
git merge dog
```

## Riešenie *merge* konfliktov
```powershell
git merge cat
# (!)
# konflikt v animals.py:
# zmeny z oboch vetiev musia byť 
# zlúčené manuálne (napr. vo VS Code)

# pridaj zmeny do ďalšej verzie
git add animals.py
# ulož novú verziu su zlúčenými zmenami
git commit -m "merged dog and cat features"
```

# Vzdialené repozitáre *(remote)*

## Vytvorenie repozitára na Githube

## Poslanie lokálnej kópie na *remote*

```powershell
git push -u origin main
```

```powershell
PS C:\Users\tibor.stanko\repo> git push -u origin main
Enumerating objects: 3, done.
Counting objects: 100% (3/3), done.
Writing objects: 100% (3/3), 241 bytes | 120.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
To https://github.com/bbrrck/test-repo-01.git
 * [new branch]      main -> main
branch 'main' set up to track 'origin/main'.
```

## Klonovanie existujúceho *remote* repozitára
```powershell
git clone https://github.com/bbrrck/animals.git
```

# Pokročilý Git

## `git log`

## Interaktívne pridávanie zmien
```powershell
git add --interactive # alebo `git add -i`
```

## `git blame`

# Markdown rýchlokurz

# Užitočné zdroje

## Dokumentácia
- [Oficiálna stránka](https://git-scm.com) a [dokumentácia](https://git-scm.com/doc) Gitu
- [Pro Git](https://git-scm.com/book/en/v2), voľne dostupná oficiálna kniha, k dispozícii čiastočne aj [v češtine](https://git-scm.com/book/cs/v2)

## Kurzy & tutoriály

### sk
- videokurz od Yablka: [Git a Github od základov](https://www.youtube.com/watch?v=0v5K4GvK4Gs)
- predmet *Základy softvérového inžinierstva* na FEI TUKE
    - časť 2: [Systémy pre správu verzií](https://kurzy.kpi.fei.tuke.sk/zsi/labs/02-git.html)
    - časť 3: [Práca s vetvami v systéme Git](https://kurzy.kpi.fei.tuke.sk/zsi/labs/03-git.html)

### en
- [git - the simple guide](https://rogerdudler.github.io/git-guide/)
- Coursera: [Introduction to Git and GitHub](https://www.coursera.org/learn/introduction-git-github/)
- Missing Semester of CS Education, [Lecture 6: Version Control (git)](https://www.youtube.com/watch?v=2sjqTHE0zok)
- [Learn how Git works internally with simple diagrams](https://medium.com/@praveenmuth2/learn-how-git-works-internally-with-simple-diagrams-a9349dc32831)
- [Atlassian Git tutorial](https://www.atlassian.com/git/tutorials)

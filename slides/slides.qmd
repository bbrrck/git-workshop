---
title: "Git workshop"
subtitle: "*Aj Ty v IT*"
author: "Tibor Stanko"
date: "*13.9.2022*"
format:
    revealjs: 
        mermaid-format: svg
        highlight-style: gruvbox-dark
        #highlight-style: gruvbox-light
        theme: [simple, slides.scss]
        width: 1500
        # height: 800
        number-sections: true
        number-depth: 1
        # preview-links: true
        # logo: logo.png
        # chalkboard: true
        toc: true
        toc-depth: 1
        toc-title: "Obsah"
        # footer: "Git workshop - 13.9.2022"
        center-title-slide: true
        code-line-numbers: false
        title-slide-attributes:
            data-background-image: img/hero.svg
            data-background-size: 50%
            data-background-position: bottom
            # footer: "."
        auto-animate-easing: ease-in-out
        auto-animate-unmatched: false
        auto-animate-duration: 0.8
---

# √övod

## O mne 
:::: {.columns}

::: {.column width="72%"}
- [Tibor Stanko](https://tiborstanko.sk/), 31 rokov
- od 2020 d√°tov√Ω in≈æinier v Zurich Insurance, Bratislava üá∏üá∞
- predt√Ωm 6 rokov v akademickej sf√©re vo üá´üá∑ (PhD, postdoc)
- r√°d automatizujem nudn√© √∫lohy s pomocou Pythonu üêç
- nie som Git guru, no Git pou≈æ√≠vam denne u≈æ viac ako 7 rokov
- moje voƒænoƒçasov√© aktivity: üë®‚Äçüë©‚Äçüëß‚Äçüë¶üö≤‚õ∞Ô∏èüé∏üéπüç∫
:::

::: {.column width="28%"}
![](img/tibors.jpg){.rounded-corners}
:::

::::

## O tomto workshope

## Anketa!

 <!-- SECTION - Git a Github -->

# Git a Github

## ƒåo je to Git?

- **syst√©m pre spr√°vu verzi√≠**
- angl. *version control system* (VCS) alebo *source control management* (SCM)
- zaznamen√°va hist√≥riu v√Ωvoja projektu
- u≈æitoƒçn√Ω pre t√≠my aj pre jednotlivcov
- nie je len o k√≥de, dovoƒæuje uklada≈• ƒæubovoƒæn√© s√∫bory


## Preƒço potrebujeme syst√©my na spr√°vu verzi√≠?
![](img/how-not-to-name-files.png)

## Preƒço potrebujeme syst√©my na spr√°vu verzi√≠?
![](img/how-not-to-name-files-crossed.png)

## ƒåo umo≈æ≈àuje Git?

<!-- ::: {.incremental} -->
- uklada≈• verzie
- prep√≠na≈• medzi verziami
- obnovi≈• predo≈°l√∫ verziu
- porovn√°va≈• verzie
- vytv√°ra≈• vetvy
- zluƒçova≈• vetvy
<!-- - rie≈°i≈• konflikty medzi vetvami -->
<!-- ::: -->

## Git slovn√≠k

::: {.columns}

::: {.column width="50%" .git-slovnik}
| en | sk |
|---|---|
| *branch*              | vetva |
| *clone*               | naklonovanie repozit√°ra |
| *commit*              | z√°znam |
| *commit message*      | popis z√°znamu |
| *conflict*            | konflikt medzi verziami |
| *conflict resolution* | rie≈°enie konfliktov |
| *diff*                | rozdiel medzi verziami |
| *merge*               | zl√∫ƒçenie vetiev |
:::

::: {.column width="50%" .git-slovnik}
| en | sk |
|---|---|
| *pull*                | stiahnutie vzdialen√Ωch zmien |
| *push*                | odoslanie lok√°lnych zmien |
| *repository*          | repozit√°r, √∫lo≈æisko |
| *remote*              | vzdialen√Ω repozit√°r |
| *snapshot*            | sn√≠mka |
| *staging area*        | pr√≠pravn√° oblas≈• (tie≈æ *index*) |
| *status*              | stav repozit√°ra |
| *version*             | verzia |
:::

:::

## ƒåo je to Github?
- *"soci√°lna sie≈• pre program√°torov"*
- **Git** = syst√©m na spr√°vu verzi√≠
- **Github** = cloudov√Ω port√°l na ukladanie repozit√°rov
- pou≈æ√≠va Git, no nie je jeho s√∫ƒças≈•ou
<!-- - port√°l na ukladanie vzdialen√Ωch Git repozit√°rov -->
- obsahuje funkcionalitu ktor√° nie je v Gite
    - *Issues*, *Pull requests*, *Actions*, ...
- podobn√© slu≈æby: [Gitlab](https://about.gitlab.com/), [Bitbucket](https://bitbucket.org/), [Azure DevOps](https://dev.azure.com/), a in√©

## {background-image="img/github-screenshot.png" background-size="contain"}

# Z√°klady Gitu
<!-- ```{mermaid}
%%| fig-width: 6.5
%%{
    init: { 
        'logLevel': 'debug', 
        'theme': 'base', 
        'gitGraph': {
            'showCommitLabel': true, 
            'showBranches': false, 
            'mainBranchName': 'main',
            'rotateCommitLabel': true
        } 
    } 
}%%
    gitGraph
        checkout main
        commit id:"version 1"
        commit id:"version 2"
        commit id:"version 3"
        commit id:"version 4"
``` -->


## Krok 0: Pracujeme s termin√°lom

- Aby sme pochopili ako Git funguje, budeme na zaƒçiatku sp√∫≈°≈•a≈• Git pr√≠kazy cez **termin√°l**
- Nesk√¥r si uk√°≈æeme aj pou≈æitie Gitu priamo v IDE (napr. vo VS Code)
- Vo **Windowse** odpor√∫ƒçam [Windows Terminal](https://apps.microsoft.com/store/detail/windows-terminal/9N0DX20HK701?hl=en-us&gl=us) a PowerShell

. . .

::: {.fontsize-070}
- Z√°kladn√© pr√≠kazy na navig√°ciu v termin√°li:
    - `pwd` --- vyp√≠≈° aktu√°lny adres√°r
    - `cd folder` --- zme≈à aktu√°lny adres√°r na `folder`

```powershell
>> pwd                        # C:\Users\tibor.stanko
>> cd folder                  # C:\Users\tibor.stanko\folder
>> cd ..                      # C:\Users\tibor.stanko
>> cd C:\Users\janko.hrasko\  # C:\Users\janko.hrasko
>> cd ~                       # C:\Users\tibor.stanko
```

:::


## Krok 1: In≈°tal√°cia Gitu

- Vo **Windowse** existuje viacero sp√¥sobov ako nain≈°talova≈• Git, napr.
    - cez [klasick√Ω in≈°tal√°tor](https://git-scm.com/download/win)
    - cez [scoop](https://scoop.sh/) (odpor√∫ƒçam) --- v PowerShell spustite nasledovn√© pr√≠kazy:

::: {.fontsize-070}
```powershell
Set-ExecutionPolicy RemoteSigned -Scope CurrentUser
irm get.scoop.sh | iex # in≈°tal√°cia scoopu
scoop install git # in≈°tal√°cia gitu
```
:::

- In≈°trukcie pre **macOS** alebo **Linux** s√∫ na ofici√°lnej str√°nke [v angliƒçtine](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) aj [v ƒçe≈°tine](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git).


## Krok 2: Nastavenie Gitu

- Skontrolujme ƒçi je Git spr√°vne nain≈°talovan√Ω:
```powershell
git --version
```

- Predt√Ωm ako zaƒçneme pracova≈• s Gitom, je potrebn√© nastavi≈• si meno a email cez pr√≠kaz `git config`. Tieto √∫daje bude Git pou≈æ√≠va≈• na priradenie autora k verzii.
```powershell
git config --global user.name "Tibor Stanko"
git config --global user.email "tibor.stanko@zurich.com"
```

- Predvolen√∫ vetvu si nastav√≠me na `main` (o [vetv√°ch](#/vetvy-branches) si povieme viac nesk√¥r)
```powershell
git config --global init.defaultBranch "main"
```


## Krok 3: Vytvorenie Git repozit√°ra

- Prepneme sa do adres√°ra z ktor√©ho chceme spravi≈• repozit√°r:
```powershell
cd ~\hello
```

- Pr√≠kaz `git init` sl√∫≈æi na vytvorenie Git repozit√°ra v aktu√°lnom adres√°ri:
```powershell
git init
```

- Po spusten√≠ pr√≠kazu Git vyp√≠≈°e:
```markdown
Initialized empty Git repository in C:/Users/tibor.stanko/hello/.git/
```


## Krok 4: Ulo≈æenie verzie

Ulo≈æenie verzie prebieha v dvoch krokoch.

1. Cez `git add` oznaƒç√≠me zmeny ktor√© maj√∫ by≈• pridan√© do novej verzie:
```powershell
git add hello.py
```

2. Cez `git commit` vytvor√≠me z√°znam o novej verzii:
```powershell
git commit -m "Add hello.py"
```
<!-- ![](https://rogerdudler.github.io/git-guide/img/trees.png) -->


## Krok 4: Ulo≈æenie verzie
- Popis z√°znamu *(commit message)* je v√§ƒç≈°inou kr√°tka jednoriadkov√° spr√°va ktor√° sa ≈°pecifikuje cez argument `-m "commit message"`

- Ak chceme nap√≠sa≈• dlh≈°√≠ popis, argument `-m` vynech√°me. `git commit` vtedy otvor√≠ textov√Ω editor v ktorom popis nap√≠≈°eme. 

- V Gite na Windowse je na p√≠sanie *commit message* predvolen√Ω editor `vim`, ktor√Ω be≈æ√≠ priamo v termin√°li. Ak nem√°te sk√∫senosti s pou≈æ√≠van√≠m vimu, m√¥≈æete si editor zmeni≈• napr. na `notepad`:
```powershell
git config --global core.editor notepad
```


## Krok 5: Kontrola stavu repozit√°ra

- Aktu√°lny stav repozit√°ra m√¥≈æeme skontrolova≈• cez `git status` 
```powershell
>> git status  # pr√≠padne `git status -s` pre skr√°ten√Ω v√Ωpis
On branch main
nothing to commit, working tree clean
```

- Cez pr√≠kaz `git log` sa m√¥≈æeme presvedƒçi≈• o tom ≈æe z√°znam bol vytvoren√Ω:
```js
>> git log
commit bf5c9b4a320012b422546fcb86f5b957104bea55 (HEAD -> main)
Author: Tibor Stanko <tibor.stanko@gmail.com>
Date:   Tue Sep 13 17:00:00 2022 +0200

    Add hello.py
``` 


::: {.notes}
Niektor√© syst√©my na kontrolu verzi√≠ funguj√∫ tak ≈æe vytvoria nov√∫ verziu zo v≈°etk√Ωch aktu√°lnych s√∫borov v repozit√°ri. Tento sp√¥sob ukladania z√°loh m√¥≈æe by≈• nev√Ωhodn√Ω. Pr√≠kladom je situ√°cia keƒè sme v repozit√°ri implementovali dve nez√°visl√© funkcie, a chceme ich zachyti≈• v dvoch rozdielnych verzi√°ch. V Gite preto existuje koncept pr√≠pravnej z√≥ny (*staging area*), vƒèaka ktorej m√°me kontrolu nad t√Ωm ktor√© zmeny bud√∫ a ktor√© nebud√∫ pridan√© do nasleduj√∫cej verzie.

:::

## √ölohy
1. Vytvor si na svojom poƒç√≠taƒçi pr√°zdny adres√°r, napr. `git-workshop`
1. Sprav z adres√°ra `git-workshop` Git repozit√°r 
1. Vytvor v adres√°ri s√∫bor (napr. `test.txt`) s ƒæubovoƒæn√Ωm obsahom
1. Pridaj `test.txt` do ƒèal≈°ej verzie a ulo≈æ ju

<!-- ## Krok 5: Git vo VS Code -->

# Vetvy *(branches)*

<!-- ```{mermaid}
%%{
    init: { 
        'logLevel': 'debug', 
        'theme': 'base', 
        'themeVariables': {

        },
        'gitGraph': {
            'showCommitLabel': false, 
            'showBranches': false, 
            'mainBranchName': 'main'
        } 
    } 
}%%
    gitGraph
        checkout main
        commit
        commit
        branch bugfix
        branch feature
        checkout bugfix
        commit
        commit
        checkout feature
        commit
        commit
        commit
        commit
        checkout main
        merge bugfix
        merge feature
``` -->


## ƒåo je to vetva *(branch)* ?

- Vetvy sl√∫≈æia na vyboƒçenie z hlavnej l√≠nie a pokraƒçovanie v pr√°ci bez z√°sahu do nej
- Doteraz sme pracovali na vetve `main`, ktor√∫ automaticky vytvoril `git init`

- Zoznam vetiev si m√¥≈æeme pozrie≈• cez pr√≠kaz `git branch`:
```powershell
>> git branch
* main
```

::: {.fontsize-070}
V Gite je prednastaven√° hlavn√° vetva `master`. Tento n√°zov sa v posledn√Ωch rokoch [stal kontroverzn√Ωm](https://sfconservancy.org/news/2020/jun/23/gitbranchname/) a postupne sa [prest√°va pou≈æ√≠va≈•](https://github.blog/changelog/2020-10-01-the-default-branch-for-newly-created-repositories-is-now-main/). Preto sme pri [nastavovan√≠ Gitu](#/krok-2-nastavenie-gitu) zmenili `init.defaultBranch` na `main`.
:::

## Naƒço s√∫ dobr√© vetvy?

::: {.todo}
:::

## Vytvorenie vetvy *(branch)*

- Na vytvorenie novej vetvy zavol√°me
```powershell
git branch slovak
```

- Ak sa chceme prepn√∫≈• na nov√∫ vetvu:
```powershell
git checkout slovak
```

- T√°to oper√°cia je veƒæmi ƒçast√°, preto existuje skratka:
```powershell
git checkout -b slovak # vytvor vetvu 'slovak' a prepni sa na ≈àu
```

## Zluƒçovanie vetiev *(merge)*
```powershell
git checkout main
git merge slovak
```

V√Ωstup:
```markdown
Auto-merging hello.py
Merge made by the 'ort' strategy.
 hello.py | 12 +++++++++++-
 1 file changed, 11 insertions(+), 1 deletion(-)
 ```

```markdown
Auto-merging hello.py
CONFLICT (content): Merge conflict in hello.py
Automatic merge failed; fix conflicts and then commit the result.
```

```sh
*   3a5d22e (HEAD -> main) Merge all languages
|\
| * 21c7ab7 (french) Add french functionality
* |   1364948 Merge branch 'slovak'
|\ \
| * | c3159a6 (slovak) Add slovak functionality
| |/
* / 67e86d0 Fix missing exclamation mark
|/
* de1543b Add hello.py
```

## Rie≈°enie *merge* konfliktov
::: {.todo}
:::

```powershell
git merge cat
# (!)
# konflikt v animals.py:
# zmeny z oboch vetiev musia by≈• 
# zl√∫ƒçen√© manu√°lne (napr. vo VS Code)

# pridaj zmeny do ƒèal≈°ej verzie
git add animals.py
# ulo≈æ nov√∫ verziu su zl√∫ƒçen√Ωmi zmenami
git commit -m "merged dog and cat features"
```

## {background-image="img/git-conflict-vs-code-gui.png" background-size="contain"}

<!-- ## Rie≈°enie *merge* konfliktov -->
<!-- ![](img/git-conflict-vs-code-gui.png) -->

# Vzdialen√© repozit√°re *(remote)*

## Vytvorenie repozit√°ra na Githube
::: {.todo}
:::

## Poslanie lok√°lnej k√≥pie na *remote*
::: {.todo}
:::

```powershell
git push -u origin main
```

```markdown
Enumerating objects: 3, done.
Counting objects: 100% (3/3), done.
Writing objects: 100% (3/3), 241 bytes | 120.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
To https://github.com/bbrrck/test-repo-01.git
 * [new branch]      main -> main
branch 'main' set up to track 'origin/main'.
```

## Klonovanie existuj√∫ceho *remote* repozit√°ra

::: {.todo}
:::

```powershell
git clone https://github.com/bbrrck/animals.git
```

# Pokroƒçil√Ω Git

## `git log`

## Interakt√≠vne prid√°vanie zmien
```powershell
git add --interactive # alebo `git add -i`
```

## `git blame`

## `.gitignore`

# Markdown r√Ωchlokurz

::: {.todo}
:::


# U≈æitoƒçn√© zdroje

## Dokument√°cia
- [Ofici√°lna str√°nka](https://git-scm.com) a [dokument√°cia](https://git-scm.com/doc) Gitu
- [Pro Git](https://git-scm.com/book/en/v2), voƒæne dostupn√° ofici√°lna kniha, k dispoz√≠cii ƒçiastoƒçne aj [v ƒçe≈°tine](https://git-scm.com/book/cs/v2)

## Kurzy & tutori√°ly

### sk
- videokurz od Yablka: [Git a Github od z√°kladov](https://www.youtube.com/watch?v=0v5K4GvK4Gs)
- predmet *Z√°klady softv√©rov√©ho in≈æinierstva* na FEI TUKE
    - ƒças≈• 2: [Syst√©my pre spr√°vu verzi√≠](https://kurzy.kpi.fei.tuke.sk/zsi/labs/02-git.html)
    - ƒças≈• 3: [Pr√°ca s vetvami v syst√©me Git](https://kurzy.kpi.fei.tuke.sk/zsi/labs/03-git.html)

### en
- [git - the simple guide](https://rogerdudler.github.io/git-guide/)
- Coursera: [Introduction to Git and GitHub](https://www.coursera.org/learn/introduction-git-github/)
- Missing Semester of CS Education, [Lecture 6: Version Control (git)](https://www.youtube.com/watch?v=2sjqTHE0zok)
- [Learn how Git works internally with simple diagrams](https://medium.com/@praveenmuth2/learn-how-git-works-internally-with-simple-diagrams-a9349dc32831)
- [Atlassian Git tutorial](https://www.atlassian.com/git/tutorials)

# ƒéakujem za pozornos≈•!